---
# Modular Proxmox LXC Playbook
# ============================
# This playbook uses a modular structure to handle Proxmox LXC operations
# Features are organized in separate task files

- name: Create and configure Proxmox LXC containers
  hosts: localhost
  connection: local
  gather_facts: false

  collections:
    - community.general

  vars:
    # API/Secrets
    proxmox_api_host: "{{ lookup('env', 'PROXMOX_API_HOST') | default(omit) }}"
    proxmox_api_port: "{{ (lookup('env', 'PROXMOX_API_PORT') | default(8006, true)) | int }}"
    proxmox_validate_certs: "{{ (lookup('env', 'PROXMOX_VALIDATE_CERTS') | default(true, true)) | bool }}"

    proxmox_api_token_id: "{{ lookup('env', 'PROXMOX_API_TOKEN_ID') | default(omit) }}"      # e.g. user@pve!ci OR ci
    proxmox_api_token_secret: "{{ lookup('env', 'PROXMOX_API_TOKEN_SECRET') | default(omit) }}"

    proxmox_api_user: "{{ lookup('env', 'PROXMOX_API_USER') | default(omit) }}"              # e.g. user@pve
    proxmox_api_password: "{{ lookup('env', 'PROXMOX_API_PASSWORD') | default(omit) }}"

    # Derived auth
    proxmox_token_has_user: "{{ proxmox_api_token_id is defined and ('!' in proxmox_api_token_id) }}"
    proxmox_token_user_part: "{{ proxmox_api_token_id.split('!')[0] if proxmox_token_has_user else omit }}"
    proxmox_token_name: "{{ proxmox_api_token_id.split('!')[1] if proxmox_token_has_user else proxmox_api_token_id if proxmox_api_token_id is defined else omit }}"

    proxmox_effective_user: "{{ proxmox_api_user if proxmox_api_user is defined else (proxmox_token_user_part if proxmox_token_has_user else omit) }}"
    proxmox_use_password_auth: "{{ proxmox_api_password is defined and proxmox_effective_user is defined }}"
    proxmox_use_token_auth: "{{ proxmox_token_name is defined and proxmox_api_token_secret is defined and proxmox_effective_user is defined }}"
    proxmox_credentials_present: "{{ proxmox_api_host is defined and (proxmox_use_token_auth or proxmox_use_password_auth) }}"

    # Core params
    proxmox_node: "{{ lookup('env', 'PROXMOX_NODE') | default('pve', true) }}"
    proxmox_storage: "{{ lookup('env', 'PROXMOX_STORAGE') | default('local-lvm', true) }}"    # data storage for rootfs
    proxmox_template_storage: "{{ lookup('env', 'PROXMOX_CT_TEMPLATE_STORAGE') | default('local', true) }}"  # where CT templates live

    # CT template file; either full 'local:vztmpl/ubuntu-24.04-standard_24.04-2_amd64.tar.zst' or just the filename
    proxmox_ct_template_file: "{{ lookup('env', 'PROXMOX_CT_TEMPLATE') | default('ubuntu-22.04-standard_22.04-1_amd64.tar.zst', true) }}"
    proxmox_ct_ostemplate: "{{ (proxmox_ct_template_file if ':' in proxmox_ct_template_file else proxmox_template_storage ~ ':vztmpl/' ~ proxmox_ct_template_file) }}"

    # Container matrix (array of CT specs)
    proxmox_cts: |
      {{
        lookup('env', 'PROXMOX_CTS_JSON')
        | default('[{"hostname":"ct-01","vmid":201,"cores":2,"memory":2048,"disk_gb":10,"ip":"dhcp","net_bridge":"vmbr0"}]', true)
      }}

    # CT defaults
    ct_unprivileged: "{{ (lookup('env', 'PROXMOX_CT_UNPRIVILEGED') | default(true, true)) | bool }}"
    ct_nesting: "{{ (lookup('env', 'PROXMOX_CT_NESTING') | default(true, true)) | bool }}"
    ct_swap: "{{ (lookup('env', 'PROXMOX_CT_SWAP_MB') | default(0, true)) | int }}"

    # Root auth
    ct_password: "{{ lookup('env', 'CT_PASSWORD') | default(omit, true) }}"
    ct_pubkey: "{{ lookup('env', 'CT_SSH_AUTHORIZED_KEYS') | default(omit, true) }}"

    # Optional SSH to Proxmox host for IP discovery
    proxmox_fetch_ip_via_ssh: "{{ (lookup('env','PROXMOX_FETCH_IP_VIA_SSH') | default(true, true)) | bool }}"
    proxmox_ssh_user: "{{ lookup('env', 'PROXMOX_SSH_USER') | default('root', true) }}"
    proxmox_ssh_port: "{{ (lookup('env', 'PROXMOX_SSH_PORT') | default(22, true)) | int }}"
    proxmox_ssh_key_path: "{{ lookup('env', 'PROXMOX_SSH_KEY_PATH') | default('', true) }}"
    proxmox_ssh_use_sudo: "{{ (lookup('env', 'PROXMOX_SSH_USE_SUDO') | default(proxmox_ssh_user != 'root', true)) | bool }}"

    # Prefer SSH-based IP discovery by default; API static-only fallback optional
    proxmox_fetch_ip_via_api: "{{ (lookup('env','PROXMOX_FETCH_IP_VIA_API') | default(false, true)) | bool }}"
    proxmox_api_base_url: "https://{{ proxmox_api_host }}:{{ proxmox_api_port }}/api2/json"

    # llama.cpp installation control
    # Set to true to install llama.cpp from https://github.com/ggml-org/llama.cpp
    # Can be controlled via env var: INSTALL_LLAMA_CPP=true
    install_llama_cpp: "{{ (lookup('env', 'INSTALL_LLAMA_CPP') | default(false, true)) | bool }}"
    
    # llama.cpp configuration
    llama_cpp_repo_url: "{{ lookup('env', 'LLAMA_CPP_REPO_URL') | default('https://github.com/ggml-org/llama.cpp', true) }}"
    llama_cpp_version: "{{ lookup('env', 'LLAMA_CPP_VERSION') | default('master', true) }}"  # branch/tag to checkout
    llama_cpp_install_dir: "{{ lookup('env', 'LLAMA_CPP_INSTALL_DIR') | default('/opt/llama.cpp', true) }}"
    llama_cpp_build_type: "{{ lookup('env', 'LLAMA_CPP_BUILD_TYPE') | default('Release', true) }}"  # Release or Debug
    llama_cpp_enable_cublas: "{{ (lookup('env', 'LLAMA_CPP_ENABLE_CUBLAS') | default(false, true)) | bool }}"  # CUDA support
    llama_cpp_enable_metal: "{{ (lookup('env', 'LLAMA_CPP_ENABLE_METAL') | default(false, true)) | bool }}"  # Metal (Apple) support
    llama_cpp_build_server: "{{ (lookup('env', 'LLAMA_CPP_BUILD_SERVER') | default(true, true)) | bool }}"  # Build HTTP server

  module_defaults:
    community.general.proxmox:
      api_host: "{{ proxmox_api_host }}"
      api_port: "{{ proxmox_api_port }}"
      validate_certs: "{{ proxmox_validate_certs }}"
      api_user: "{{ proxmox_effective_user }}"
      api_password: "{{ proxmox_api_password if proxmox_use_password_auth else omit }}"
      api_token_id: "{{ proxmox_token_name if proxmox_use_token_auth else omit }}"
      api_token_secret: "{{ proxmox_api_token_secret if proxmox_use_token_auth else omit }}"

  pre_tasks:
    - name: Import SSH key setup tasks
      ansible.builtin.import_tasks: tasks/proxmox/ssh_keys.yml
      tags: ['ssh-keys']

    - name: Import API authentication tasks
      ansible.builtin.import_tasks: tasks/proxmox/api_auth.yml
      tags: ['auth']

    - name: Import SSH base command setup
      ansible.builtin.import_tasks: tasks/proxmox/ssh_config.yml
      tags: ['ssh']

  tasks:
    - name: Import container creation and configuration tasks
      ansible.builtin.import_tasks: tasks/proxmox/container_creation.yml
      tags: ['proxmox', 'create']

    - name: Import container networking and connection tasks
      ansible.builtin.import_tasks: tasks/proxmox/container_networking.yml
      tags: ['ip']

    # Optional feature: llama-cpp installation
    - name: Include llama-cpp VM readiness checks
      ansible.builtin.import_tasks: tasks/features/llama-cpp/vm_readiness.yml
      when:
        - install_llama_cpp
      tags: ['llama-cpp', 'preflight']

    - name: Include llama-cpp installation tasks
      ansible.builtin.import_tasks: tasks/features/llama-cpp/install.yml
      when:
        - install_llama_cpp
      tags: ['llama-cpp']
