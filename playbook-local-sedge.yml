---
- name: Deploy Simple Local Ethereum Node using Sedge
  hosts: all
  gather_facts: yes
  vars:
    # Sedge configuration
    sedge_version: "latest"
    sedge_binary: "{{ playbook_dir }}/sedge"
    sedge_data_dir: "{{ (lookup('env', 'VAGRANT_SEDGE_DIR') | default(playbook_dir + '/local-deployment', true)) }}"

  tasks:
    - name: Optionally reset Sedge data directory (dangerous)
      file:
        path: "{{ sedge_data_dir }}"
        state: absent
      when: reset | default(false) | bool

    - name: Check if Docker is available
      command: docker --version
      register: docker_check
      failed_when: false
      changed_when: false

    - name: Fail if Docker is not available
      fail:
        msg: "Docker is not installed or not running. Please install Docker first."
      when: docker_check.rc != 0

    - name: Ensure sedge data directory exists
      file:
        path: "{{ sedge_data_dir }}"
        state: directory
        mode: '0755'

    - name: Check if Sedge binary exists
      stat:
        path: "{{ sedge_binary }}"
      register: sedge_exists

    - name: Debug sedge conditions
      debug:
        msg: 
          - "Binary exists: {{ sedge_exists.stat.exists }}"
          - "Sedge version: {{ sedge_version }}"
          - "Should download: {{ not sedge_exists.stat.exists or sedge_version == 'latest' }}"

    - name: Fail if Sedge binary missing and updates skipped
      fail:
        msg: |
          Sedge binary not found at {{ sedge_binary }}.
          You are skipping sedge_update tags, but Sedge needs to be downloaded first.
          Please run without --skip-tags sedge_update, or download Sedge manually.
      when: not sedge_exists.stat.exists and 'sedge_update' in ansible_skip_tags | default([])

    - name: Get latest Sedge release info
      uri:
        url: "https://api.github.com/repos/NethermindEth/sedge/releases/latest"
        method: GET
        return_content: yes
      register: sedge_release
      when: not sedge_exists.stat.exists or sedge_version == "latest"

    - name: Check current Sedge version if exists
      command: "{{ sedge_binary }} version"
      register: current_sedge_version
      failed_when: false
      changed_when: false
      when: sedge_version == "latest" and sedge_exists.stat.exists
      tags:
        - sedge_version_check

    - name: Extract current version number
      set_fact:
        current_version: "{{ current_sedge_version.stdout | regex_search('sedge (v[0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first | default('') }}"
      when: sedge_version == "latest" and current_sedge_version is defined and not current_sedge_version.skipped | default(false) and current_sedge_version.rc == 0
      tags:
        - sedge_version_check

    - name: Download or update Sedge
      block:
        - name: Set Sedge download URL for macOS (Apple Silicon)
          set_fact:
            sedge_download_url: "{{ sedge_release.json.assets | selectattr('name', 'match', '.*darwin.*arm64.*') | map(attribute='browser_download_url') | first }}"
          when: ansible_system == "Darwin" and ansible_architecture == "arm64"

        - name: Set Sedge download URL for macOS (Intel)
          set_fact:
            sedge_download_url: "{{ sedge_release.json.assets | selectattr('name', 'match', '.*darwin.*amd64.*') | map(attribute='browser_download_url') | first }}"
          when: ansible_system == "Darwin" and ansible_architecture == "x86_64"

        - name: Set Sedge download URL for Linux (ARM64)
          set_fact:
            sedge_download_url: "{{ sedge_release.json.assets | selectattr('name', 'match', '.*linux.*arm64.*') | map(attribute='browser_download_url') | first }}"
          when: ansible_system == "Linux" and (ansible_architecture in ['aarch64', 'arm64'])

        - name: Set Sedge download URL for Linux (AMD64)
          set_fact:
            sedge_download_url: "{{ sedge_release.json.assets | selectattr('name', 'match', '.*linux.*amd64.*') | map(attribute='browser_download_url') | first }}"
          when: ansible_system == "Linux" and (ansible_architecture in ['x86_64', 'amd64'])

        - name: Download/Update Sedge binary
          get_url:
            url: "{{ sedge_download_url }}"
            dest: "{{ sedge_binary }}"
            mode: '0755'
            force: yes
          when: sedge_download_url is defined

      when: not sedge_exists.stat.exists or (sedge_version == "latest" and sedge_exists.stat.exists and 'sedge_version_check' not in ansible_skip_tags | default([]) and (current_sedge_version is defined and not current_sedge_version.skipped | default(false) and (current_sedge_version.rc != 0 or (current_version is defined and current_version != sedge_release.json.tag_name))))

    - name: Install Sedge dependencies
      command: "{{ sedge_binary }} deps install"
      args:
        chdir: "{{ playbook_dir }}"
      register: sedge_deps
      changed_when: "'already installed' not in sedge_deps.stdout"
      when: sedge_exists.stat.exists

    - name: Create JWT secret file
      command: openssl rand -hex 32
      register: jwt_secret
      changed_when: false

    - name: Write JWT secret to file
      copy:
        content: "{{ jwt_secret.stdout }}"
        dest: "{{ sedge_data_dir }}/jwtsecret"
        mode: '0600'

    - name: Generate Sedge configuration
      block:
        - name: Set consensus client image mapping
          set_fact:
            cl_client_images:
              lighthouse: "sigp/lighthouse:latest"
              prysm: "prysmaticlabs/prysm-beacon-chain:latest"
              teku: "consensys/teku:latest"
              lodestar: "chainsafe/lodestar:latest"

        - name: Build base Sedge generate command
          set_fact:
            sedge_cmd: >-
              {{ sedge_binary }} generate
              --logging none
              full-node
              --no-mev-boost
              {% if non_validator_mode | default(true) | bool %}--no-validator{% endif %}
              --latest
              --map-all
              --network {{ network | default('sepolia') }}
              -c {{ cl_client | default('lodestar') }}:{{ cl_client_images[cl_client | default('lodestar')] | default((cl_client | default('lodestar')) + ':latest') }}
              --jwt-secret-path {{ sedge_data_dir }}/jwtsecret
              -p {{ sedge_data_dir }}

        - name: Add sync mode specific flags
          set_fact:
            sedge_cmd: >-
              {{ sedge_cmd }}
              {% if (sync_mode | default('fast')) == 'fast' %}--el-extra-flag Sync.SnapSync=false{% endif %}
              {% if (sync_mode | default('fast')) == 'archive' %}--el-extra-flag config={{ network | default('sepolia') }}_archive{% endif %}

        - name: Execute Sedge generate command
          command: "{{ sedge_cmd }}"
          args:
            chdir: "{{ sedge_data_dir }}"
          register: sedge_generate
          changed_when: true

        - name: Display Sedge generation result
          debug:
            msg: "Sedge configuration generated successfully"

        - name: Ensure docker-compose.yml exists
          stat:
            path: "{{ sedge_data_dir }}/docker-compose.yml"
          register: compose_file

        - name: Fail if docker-compose.yml is missing
          fail:
            msg: "docker-compose.yml was not generated at {{ sedge_data_dir }}/docker-compose.yml"
          when: not compose_file.stat.exists

    - name: Start Ethereum node using Sedge run command
      block:
        - name: Stop any existing containers
          command: "{{ sedge_binary }} down -p {{ sedge_data_dir }}"
          args:
            chdir: "{{ sedge_data_dir }}"
          register: sedge_down
          failed_when: false
          changed_when: sedge_down.rc == 0

        - name: Start Ethereum node with Sedge
          command: "{{ sedge_binary }} run -p {{ sedge_data_dir }}"
          args:
            chdir: "{{ sedge_data_dir }}"
          register: sedge_run
          changed_when: true

        - name: Wait for containers to start
          wait_for:
            timeout: 10
          delegate_to: localhost

        - name: Check docker compose services declared
          command: docker compose -f {{ sedge_data_dir }}/docker-compose.yml ps --services
          register: compose_services
          changed_when: false
          failed_when: false

        - name: Fallback - bring services up with docker compose
          command: docker compose -f {{ sedge_data_dir }}/docker-compose.yml up -d
          args:
            chdir: "{{ sedge_data_dir }}"
          when: (compose_services.stdout | trim) == ""
          register: compose_up
          changed_when: true

        - name: Check container status
          command: docker ps --filter "name=sedge"
          register: container_status
          changed_when: false

        - name: Display deployment summary
          debug:
            msg:
              - "=== Ethereum Node Deployed Successfully using Sedge ==="
              - "Network: {{ network | default('sepolia') }}"
              - "Execution Client: nethermind"
              - "Consensus Client: {{ cl_client | default('lodestar') }}"
              - "Sync Mode: {{ sync_mode | default('fast') }}"
              - "Non-validator Mode: {{ non_validator_mode | default(true) }}"
              - ""
              - "Compose services: {{ (compose_services.stdout | default('')).split('\n') | reject('equalto','') | list }}"
              - "Container Status:"
              - "{{ container_status.stdout_lines }}"
              - ""
              - "Data Directory: {{ sedge_data_dir }}"
              - "JWT Secret: {{ sedge_data_dir }}/jwtsecret"
              - ""
              - "Management Commands:"
              - "  Start: {{ sedge_binary }} run -p {{ sedge_data_dir }}"
              - "  Stop:  {{ sedge_binary }} down -p {{ sedge_data_dir }}"
              - "  Logs:  {{ sedge_binary }} logs -p {{ sedge_data_dir }}"
              - ""
              - "Manual Debugging (without Ansible):"
              - "  1. Generate: {{ sedge_cmd }}"
              - "  2. Run:      {{ sedge_binary }} run -p {{ sedge_data_dir }}"
              - ""
              - "Ports:"
              - "  Execution RPC: 8545"
              - "  Execution Engine: 8551"
              - "  Consensus API: 4000"
              - "  P2P: 30303 (EL), 9000 (CL)"
              - "  Metrics: 8008 (EL), 5054 (CL)" 