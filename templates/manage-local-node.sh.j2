#!/bin/bash

# Local Ethereum Node Management Script
# Generated by Ansible for Sedge-based node deployment

SEDGE_DATA_DIR="{{ sedge_data_dir }}"
SCRIPT_NAME="$(basename "$0")"

# Colors for output
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

show_help() {
    echo -e "${BLUE}Local Ethereum Node Management${NC}"
    echo -e "${BLUE}==============================${NC}"
    echo ""
    echo "Usage: $SCRIPT_NAME [COMMAND]"
    echo ""
    echo "Commands:"
    echo -e "  ${GREEN}start${NC}     Start the Ethereum node"
    echo -e "  ${GREEN}stop${NC}      Stop the Ethereum node"
    echo -e "  ${GREEN}restart${NC}   Restart the Ethereum node"
    echo -e "  ${GREEN}status${NC}    Show node status"
    echo -e "  ${GREEN}logs${NC}      Show recent logs"
    echo -e "  ${GREEN}logs-f${NC}    Follow logs in real-time"
    echo -e "  ${GREEN}el-logs${NC}   Show execution client logs"
    echo -e "  ${GREEN}cl-logs${NC}   Show consensus client logs"
    echo -e "  ${GREEN}ps${NC}        Show running containers"
    echo -e "  ${GREEN}clean${NC}     Stop and remove containers (keeps data)"
    echo -e "  ${GREEN}reset${NC}     Stop, remove containers and delete data"
    echo -e "  ${GREEN}update${NC}    Pull latest Docker images"
    echo -e "  ${GREEN}info${NC}      Show node configuration info"
    echo ""
}

check_sedge_dir() {
    if [ ! -d "$SEDGE_DATA_DIR" ]; then
        echo -e "${RED}Error: Sedge data directory not found: $SEDGE_DATA_DIR${NC}"
        echo "Please run the Ansible playbook first to set up the node."
        exit 1
    fi
}

start_node() {
    echo -e "${BLUE}Starting Ethereum node...${NC}"
    cd "$SEDGE_DATA_DIR" || exit 1
    docker compose up -d
    echo -e "${GREEN}Node started successfully${NC}"
    echo "Use '$SCRIPT_NAME status' to check the node status"
}

stop_node() {
    echo -e "${BLUE}Stopping Ethereum node...${NC}"
    cd "$SEDGE_DATA_DIR" || exit 1
    docker compose down
    echo -e "${GREEN}Node stopped successfully${NC}"
}

restart_node() {
    echo -e "${BLUE}Restarting Ethereum node...${NC}"
    stop_node
    sleep 3
    start_node
}

show_status() {
    echo -e "${BLUE}Ethereum Node Status${NC}"
    echo -e "${BLUE}===================${NC}"
    cd "$SEDGE_DATA_DIR" || exit 1
    
    echo ""
    echo -e "${YELLOW}Running Containers:${NC}"
    docker compose ps
    
    echo ""
    echo -e "${YELLOW}System Resources:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
}

show_logs() {
    echo -e "${BLUE}Recent Node Logs${NC}"
    echo -e "${BLUE}================${NC}"
    cd "$SEDGE_DATA_DIR" || exit 1
    docker compose logs --tail=50
}

follow_logs() {
    echo -e "${BLUE}Following Node Logs (Ctrl+C to exit)${NC}"
    echo -e "${BLUE}====================================${NC}"
    cd "$SEDGE_DATA_DIR" || exit 1
    docker compose logs -f
}

show_el_logs() {
    echo -e "${BLUE}Execution Client Logs${NC}"
    echo -e "${BLUE}=====================${NC}"
    cd "$SEDGE_DATA_DIR" || exit 1
    if docker ps --format '{{.Names}}' | grep -q "sedge-execution-client"; then
        docker logs sedge-execution-client --tail=50
    else
        echo -e "${YELLOW}Execution client container not running${NC}"
    fi
}

show_cl_logs() {
    echo -e "${BLUE}Consensus Client Logs${NC}"
    echo -e "${BLUE}=====================${NC}"
    cd "$SEDGE_DATA_DIR" || exit 1
    if docker ps --format '{{.Names}}' | grep -q "sedge-consensus-client"; then
        docker logs sedge-consensus-client --tail=50
    else
        echo -e "${YELLOW}Consensus client container not running${NC}"
    fi
}

show_containers() {
    echo -e "${BLUE}Docker Containers${NC}"
    echo -e "${BLUE}=================${NC}"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
}

clean_node() {
    echo -e "${YELLOW}This will stop and remove containers but keep blockchain data${NC}"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Cleaning up containers...${NC}"
        cd "$SEDGE_DATA_DIR" || exit 1
        docker compose down --remove-orphans
        docker system prune -f
        echo -e "${GREEN}Cleanup completed${NC}"
    fi
}

reset_node() {
    echo -e "${RED}WARNING: This will delete ALL blockchain data!${NC}"
    echo -e "${YELLOW}You will need to resync from scratch${NC}"
    read -p "Are you sure you want to reset? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Resetting node...${NC}"
        cd "$SEDGE_DATA_DIR" || exit 1
        docker compose down --volumes --remove-orphans
        rm -rf execution-data consensus-data validator-data
        echo -e "${GREEN}Node reset completed${NC}"
        echo -e "${YELLOW}Run '$SCRIPT_NAME start' to begin fresh sync${NC}"
    fi
}

update_images() {
    echo -e "${BLUE}Updating Docker images...${NC}"
    cd "$SEDGE_DATA_DIR" || exit 1
    docker compose pull
    echo -e "${GREEN}Images updated${NC}"
    echo -e "${YELLOW}Run '$SCRIPT_NAME restart' to use updated images${NC}"
}

show_info() {
    echo -e "${BLUE}Node Configuration Information${NC}"
    echo -e "${BLUE}==============================${NC}"
    
    if [ -f "$SEDGE_DATA_DIR/.env" ]; then
        echo -e "${YELLOW}Environment Configuration:${NC}"
        grep -E "^(NETWORK|NODE_NAME|FEE_RECIPIENT|METRICS_ENABLED)" "$SEDGE_DATA_DIR/.env" | while IFS= read -r line; do
            echo "  $line"
        done
    fi
    
    echo ""
    echo -e "${YELLOW}Data Directory:${NC} $SEDGE_DATA_DIR"
    echo -e "${YELLOW}Docker Compose File:${NC} $SEDGE_DATA_DIR/docker-compose.yml"
    
    if [ -f "$SEDGE_DATA_DIR/docker-compose.yml" ]; then
        echo ""
        echo -e "${YELLOW}Services:${NC}"
        grep "container_name:" "$SEDGE_DATA_DIR/docker-compose.yml" | sed 's/.*container_name: /  /'
    fi
}

# Main script logic
case "${1:-help}" in
    start)
        check_sedge_dir
        start_node
        ;;
    stop)
        check_sedge_dir
        stop_node
        ;;
    restart)
        check_sedge_dir
        restart_node
        ;;
    status)
        check_sedge_dir
        show_status
        ;;
    logs)
        check_sedge_dir
        show_logs
        ;;
    logs-f)
        check_sedge_dir
        follow_logs
        ;;
    el-logs)
        check_sedge_dir
        show_el_logs
        ;;
    cl-logs)
        check_sedge_dir
        show_cl_logs
        ;;
    ps)
        show_containers
        ;;
    clean)
        check_sedge_dir
        clean_node
        ;;
    reset)
        check_sedge_dir
        reset_node
        ;;
    update)
        check_sedge_dir
        update_images
        ;;
    info)
        check_sedge_dir
        show_info
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac 